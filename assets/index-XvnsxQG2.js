var z=Object.defineProperty;var b=(i,t,e)=>t in i?z(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var l=(i,t,e)=>(b(i,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const o of r)if(o.type==="childList")for(const h of o.addedNodes)h.tagName==="LINK"&&h.rel==="modulepreload"&&s(h)}).observe(document,{childList:!0,subtree:!0});function e(r){const o={};return r.integrity&&(o.integrity=r.integrity),r.referrerPolicy&&(o.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?o.credentials="include":r.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(r){if(r.ep)return;r.ep=!0;const o=e(r);fetch(r.href,o)}})();var n=(i=>(i[i.Top=0]="Top",i[i.Right=1]="Right",i[i.Bottom=2]="Bottom",i[i.Left=3]="Left",i))(n||{}),u=(i=>(i[i.Solo=0]="Solo",i[i.VsAi=1]="VsAi",i))(u||{}),g=(i=>(i[i.Player=0]="Player",i[i.Ai=1]="Ai",i))(g||{});const m=(i,t,e)=>{i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.strokeStyle="red",i.lineWidth=5,i.stroke(),i.closePath()},M=(i,t,e,s="blue")=>{const{x:r,y:o}=t,{width:h,height:c}=e;i.beginPath(),i.rect(r,o,h,c),i.fillStyle=s,i.fill(),i.closePath()},P=(i,t)=>{i.clearRect(0,0,t.width,t.height)},d=i=>`${i.x}-${i.y}`,f=(i,t)=>i.x===t.x&&i.y===t.y,A=async i=>new Promise(t=>setTimeout(()=>t(),i)),w="on-moved";class T{constructor(t,e,s,r,o){l(this,"myTurn",!1);l(this,"previousPositionStack",[]);l(this,"visitedCells",[]);this.x=t,this.y=e,this.grid=s,this.mazeInfo=r,this.event=o,this.event.addEventListener(w,this.onMoved.bind(this))}get position(){return new a(this.x,this.y)}get coordinate(){return new a(this.x*this.mazeInfo.cell.width,this.y*this.mazeInfo.cell.height)}get onGoalArea(){return f(this.mazeInfo.goal,this.position)}getDirection(t,e){const{x:s,y:r}=t.position,{x:o,y:h}=e.position;if(o>s)return n.Right;if(o<s)return n.Left;if(h>r)return n.Bottom;if(h<r)return n.Top}async onMoved(t){if(this.myTurn&&t.detail.participant===g.Player){const e=this.grid[d(this.position)];await A(100);const s=e.getNeighbors(this.grid).filter(o=>{const h=this.getDirection(e,o);return h===void 0?!1:!this.visitedCells.some(c=>f(o.position,c.position))&&!this.grid[d(e.position)].walls[h]});let r=s.length>0?s[Math.floor(Math.random()*s.length)]:void 0;if(r){const o=this.getDirection(e,r);o!==void 0&&this.move(o),this.visitedCells.push(r),this.previousPositionStack.push(e)}else if(r=this.previousPositionStack.pop(),r){const o=this.getDirection(e,r);o!==void 0&&this.move(o)}if(this.onGoalArea){this.myTurn=!1;return}this.myTurn=!0,this.event.dispatchEvent(new CustomEvent(w,{detail:new I(g.Player,"AI moved")}))}}reset(t,e){this.x=t.x,this.y=t.y,this.grid=e}move(t){switch(t){case n.Top:this.y-=1;break;case n.Right:this.x+=1;break;case n.Bottom:this.y+=1;break;case n.Left:this.x-=1;break}}}class C{constructor(t,e,s){l(this,"visited",!1);l(this,"walls",[!0,!0,!0,!0]);this.x=t,this.y=e,this.lastCell=s}get position(){return new a(this.x,this.y)}getNeighbors(t){return[t[this.getNeighborIndex(new a(this.x,this.y-1))],t[this.getNeighborIndex(new a(this.x+1,this.y))],t[this.getNeighborIndex(new a(this.x,this.y+1))],t[this.getNeighborIndex(new a(this.x-1,this.y))]].filter(Boolean)}checkNeighbors(t){const e=this.getNeighbors(t).filter(({visited:s})=>!s);return e.length>0?e[Math.floor(Math.random()*e.length)]:void 0}getNeighborIndex(t){return this.isOutSideBoundary(t)?"":d(t)}isOutSideBoundary(t){const{x:e,y:s}=t;return e<0||s<0||e>this.lastCell.x||s>this.lastCell.y}}class L{constructor(t,e){this.width=t,this.height=e}}class E{constructor(t,e){this.ctx=t,this.mazeInfo=e}reset(){P(this.ctx,this.mazeInfo)}drawMaze(t){for(const e of t)this.drawWalls(e)}drawBox(t,e="blue"){M(this.ctx,t,this.mazeInfo.cell,e)}drawWalls(t){const{width:e,height:s}=this.mazeInfo.cell,{walls:r,position:{x:o,y:h}}=t;r[n.Top]&&m(this.ctx,new a(this.startingX(o),this.startingY(h)),new a(this.startingX(o)+e,this.startingY(h))),r[n.Right]&&m(this.ctx,new a(this.startingX(o)+e,this.startingY(h)+s),new a(this.startingX(o)+e,this.startingY(h))),r[n.Bottom]&&m(this.ctx,new a(this.startingX(o)+e,this.startingY(h)+s),new a(this.startingX(o),this.startingY(h)+s)),r[n.Left]&&m(this.ctx,new a(this.startingX(o),this.startingY(h)+s),new a(this.startingX(o),this.startingY(h)))}startingX(t){return t*this.mazeInfo.cell.width}startingY(t){return t*this.mazeInfo.cell.height}}class k{constructor(t){l(this,"gridData",{});this.mazeInfo=t}get cells(){return Object.values(this.gridData)}reset(){return this.gridData={},this}generate(){for(let t=0;t<this.mazeInfo.cellCount;t++){const e=t%this.mazeInfo.column,s=Math.floor(t/this.mazeInfo.column);this.gridData[d(new a(e,s))]=new C(e,s,this.mazeInfo.lastCell)}return this}resetVisited(){for(const t of this.cells.filter(({visited:e})=>e))t.visited=!1;return this}isGoalReached(t){return f(t[t.length-1].position,this.mazeInfo.goal)}shortestPath(t){const e=[[this.gridData[d(t)]]];for(;!this.isGoalReached(e[0]);){const r=e.shift(),h=r[(r==null?void 0:r.length)-1].getNeighbors(this.gridData).filter(({visited:c})=>c);for(const c of h)c.visited=!1,e.push([...r,c])}const s=e[0];for(const[r,o]of s.entries())r!==0&&this.removeWalls(s[r-1],o);return this}generatePath(t){return this.findPath(t).shortestPath(t).resetVisited(),this}findPath(t){const e=[];let s=this.gridData[d(t)];for(s.visited=!0;s&&!this.isGoalCell(s.position);){const r=s.checkNeighbors(this.gridData);r?(e.push(r),s=r,s.visited=!0):s=e.pop()}return this}randomWalk(){const t=[];let e=this.gridData[d(new a(Math.floor(Math.random()*this.mazeInfo.column),Math.floor(Math.random()*this.mazeInfo.row)))];for(e.visited=!0;e;){const s=e.checkNeighbors(this.gridData);s?(this.removeWalls(e,s),t.push(s),e=s,e.visited=!0):e=t.pop()}return this}removeWalls(t,e){const{x:s,y:r}=t.position,{x:o,y:h}=e.position;o!==s?o>s?(t.walls[n.Right]=!1,e.walls[n.Left]=!1):(t.walls[n.Left]=!1,e.walls[n.Right]=!1):h>r?(t.walls[n.Bottom]=!1,e.walls[n.Top]=!1):(t.walls[n.Top]=!1,e.walls[n.Bottom]=!1),this.ensureMazeEdgeWalls(t),this.ensureMazeEdgeWalls(e)}ensureMazeEdgeWalls(t){const{position:{x:e,y:s},walls:r}=t;e===this.mazeInfo.column-1&&(r[n.Right]=!0),e===0&&(r[n.Left]=!0),s===this.mazeInfo.row-1&&(r[n.Bottom]=!0),s===0&&(r[n.Top]=!0)}isGoalCell(t){return f(this.mazeInfo.goal,t)}}class S{constructor(t,e,s,r){this.row=t,this.column=e,this.width=s,this.height=r}get cell(){return new L(this.width/this.column,this.height/this.row)}get goal(){return new a(Math.round(this.column/2)-1,Math.round(this.row/2)-1)}get goalCoordinate(){return new a(this.goal.x*this.cell.width,this.goal.y*this.cell.height)}get cellCount(){return this.row*this.column}get lastCell(){return new a(this.column-1,this.row-1)}}const v=["ArrowUp","ArrowRight","ArrowDown","ArrowLeft"];class D{constructor(t,e,s,r,o){l(this,"myTurn",!1);this.x=t,this.y=e,this.grid=s,this.mazeInfo=r,this.event=o,window.addEventListener("keydown",({code:h,key:c})=>{const y=v.indexOf(h);this.myTurn&&v.includes(c)&&this.validMove(y)&&(this.move(y),this.myTurn=!1,this.event.dispatchEvent(new CustomEvent(w,{detail:new I(g.Player,"player moved")})))})}get position(){return new a(this.x,this.y)}get coordinate(){return new a(this.x*this.mazeInfo.cell.width,this.y*this.mazeInfo.cell.height)}get onGoalArea(){return f(this.mazeInfo.goal,this.position)}move(t){switch(t){case n.Top:this.y-=1;break;case n.Right:this.x+=1;break;case n.Bottom:this.y+=1;break;case n.Left:this.x-=1;break}}reset(t,e){this.x=t.x,this.y=t.y,this.grid=e}validMove(t){return!this.getPlayerPosition().walls[t]}getPlayerPosition(){return this.grid[d(this.position)]}}class I{constructor(t,e){this.participant=t,this.details=e}}class a{constructor(t,e){this.x=t,this.y=e}}class B{constructor(t,e,s){l(this,"grid");l(this,"player");l(this,"ai");l(this,"drawer");l(this,"requestAnimation",0);l(this,"agentsEvent",new EventTarget);this.ctx=t,this.mazeInfo=e,this.mode=s,this.agentsEvent.addEventListener(w,this.onAgentsMove.bind(this)),this.grid=new k(this.mazeInfo),this.grid.generate(),this.drawer=new E(this.ctx,this.mazeInfo),this.player=new D(0,0,this.grid.gridData,this.mazeInfo,this.agentsEvent),this.player.myTurn=!0,this.ai=new T(this.mazeInfo.column-1,this.mazeInfo.row-1,this.grid.gridData,this.mazeInfo,this.agentsEvent)}onAgentsMove(t){if(this.mode===u.Solo){this.player.myTurn=!0;return}if(t.detail.participant===g.Player){this.ai.myTurn=!0;return}this.player.myTurn=!0}setMode(t){this.mode=t}soloMode(){this.grid.generatePath(new a(0,0)).randomWalk(),this.player.reset(new a(0,0),this.grid.gridData),this.player.myTurn=!0,this.ai.reset(new a(this.mazeInfo.column-1,this.mazeInfo.row-1),this.grid.gridData),this.animate()}vsAiMode(){this.grid.generatePath(new a(this.mazeInfo.column-1,this.mazeInfo.row-1)).generatePath(new a(0,0)).randomWalk(),this.player.reset(new a(0,0),this.grid.gridData),this.player.myTurn=!0,this.ai.visitedCells=[],this.ai.previousPositionStack=[],this.ai.reset(new a(this.mazeInfo.column-1,this.mazeInfo.row-1),this.grid.gridData),this.animate()}start(){this.mode===u.Solo?this.soloMode():this.vsAiMode()}initialize(){this.grid.generate()}stop(t=!0){this.grid.reset(),t&&cancelAnimationFrame(this.requestAnimation)}animate(){if(this.drawer.reset(),this.drawer.drawBox(this.mazeInfo.goalCoordinate),this.drawer.drawMaze(this.grid.cells),this.drawer.drawBox(this.player.coordinate,"orange"),this.mode===u.VsAi&&this.drawer.drawBox(this.ai.coordinate,"purple"),this.player.onGoalArea){cancelAnimationFrame(this.requestAnimation),setTimeout(()=>{alert("You Win!!!"),this.stop(!1),this.initialize(),this.start()},0);return}if(this.ai.onGoalArea){cancelAnimationFrame(this.requestAnimation),setTimeout(()=>{alert("You lose!!!"),this.stop(!1),this.initialize(),this.start()},0);return}this.requestAnimation=requestAnimationFrame(this.animate.bind(this))}}const p=400,x=800,N=15,R=29;window.onload=()=>{const i=document.querySelector("#canvas"),t=i.getContext("2d");i.height=p,i.width=x;const e=document.querySelector("#mode"),s=new B(t,new S(N,R,x,p),u.Solo);s.start(),e.addEventListener("change",r=>{const o=r.target;s.setMode(+o.value),s.stop(),s.initialize(),s.start()})};
