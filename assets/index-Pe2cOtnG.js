var p=Object.defineProperty;var I=(i,t,e)=>t in i?p(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var c=(i,t,e)=>(I(i,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const h of o.addedNodes)h.tagName==="LINK"&&h.rel==="modulepreload"&&r(h)}).observe(document,{childList:!0,subtree:!0});function e(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function r(s){if(s.ep)return;s.ep=!0;const o=e(s);fetch(s.href,o)}})();const g=(i,t,e)=>{i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.strokeStyle="red",i.lineWidth=5,i.stroke(),i.closePath()},x=(i,t,e,r="blue")=>{const{x:s,y:o}=t,{width:h,height:l}=e;i.beginPath(),i.rect(s,o,h,l),i.fillStyle=r,i.fill(),i.closePath()},z=(i,t)=>{i.clearRect(0,0,t.width,t.height)},d=i=>`${i.x}-${i.y}`,u=(i,t)=>i.x===t.x&&i.y===t.y;class v{constructor(t,e,r){c(this,"visited",!1);c(this,"walls",[!0,!0,!0,!0]);this.x=t,this.y=e,this.lastCell=r}get position(){return new n(this.x,this.y)}getNeighbors(t){return[t[this.getNeighborIndex(new n(this.x,this.y-1))],t[this.getNeighborIndex(new n(this.x+1,this.y))],t[this.getNeighborIndex(new n(this.x,this.y+1))],t[this.getNeighborIndex(new n(this.x-1,this.y))]].filter(Boolean)}checkNeighbors(t){const e=this.getNeighbors(t).filter(({visited:r})=>!r);return e.length>0?e[Math.floor(Math.random()*e.length)]:void 0}getNeighborIndex(t){return this.isOutSideBoundary(t)?"":d(t)}isOutSideBoundary(t){const{x:e,y:r}=t;return e<0||r<0||e>this.lastCell.x||r>this.lastCell.y}}class b{constructor(t,e){this.width=t,this.height=e}}var a=(i=>(i[i.Top=0]="Top",i[i.Right=1]="Right",i[i.Bottom=2]="Bottom",i[i.Left=3]="Left",i))(a||{});class P{constructor(t,e){this.ctx=t,this.mazeInfo=e}reset(){z(this.ctx,this.mazeInfo)}drawMaze(t){for(const e of t)this.drawWalls(e)}drawBox(t,e="blue"){x(this.ctx,t,this.mazeInfo.cell,e)}drawWalls(t){const{width:e,height:r}=this.mazeInfo.cell,{walls:s,position:{x:o,y:h}}=t;s[a.Top]&&g(this.ctx,new n(this.startingX(o),this.startingY(h)),new n(this.startingX(o)+e,this.startingY(h))),s[a.Right]&&g(this.ctx,new n(this.startingX(o)+e,this.startingY(h)+r),new n(this.startingX(o)+e,this.startingY(h))),s[a.Bottom]&&g(this.ctx,new n(this.startingX(o)+e,this.startingY(h)+r),new n(this.startingX(o),this.startingY(h)+r)),s[a.Left]&&g(this.ctx,new n(this.startingX(o),this.startingY(h)+r),new n(this.startingX(o),this.startingY(h)))}startingX(t){return t*this.mazeInfo.cell.width}startingY(t){return t*this.mazeInfo.cell.height}}class M{constructor(t){c(this,"gridData",{});this.mazeInfo=t}get cells(){return Object.values(this.gridData)}reset(){return this.gridData={},this}generate(){for(let t=0;t<this.mazeInfo.cellCount;t++){const e=t%this.mazeInfo.column,r=Math.floor(t/this.mazeInfo.column);this.gridData[d(new n(e,r))]=new v(e,r,this.mazeInfo.lastCell)}return this}resetVisited(){for(const t of this.cells.filter(({visited:e})=>e))t.visited=!1;return this}isGoalReached(t){return u(t[t.length-1].position,this.mazeInfo.goal)}shortestPath(t){const e=[[this.gridData[d(t)]]];for(;!this.isGoalReached(e[0]);){const s=e.shift(),h=s[(s==null?void 0:s.length)-1].getNeighbors(this.gridData).filter(({visited:l})=>l);for(const l of h)l.visited=!1,e.push([...s,l])}const r=e[0];for(const[s,o]of r.entries())s!==0&&this.removeWalls(r[s-1],o);return this}generatePath(t){return this.findPath(t).shortestPath(t).resetVisited(),this}findPath(t){const e=[];let r=this.gridData[d(t)];for(r.visited=!0;r&&!this.isGoalCell(r.position);){const s=r.checkNeighbors(this.gridData);s?(e.push(s),r=s,r.visited=!0):r=e.pop()}return this}randomWalk(){const t=[];let e=this.gridData[d(new n(Math.floor(Math.random()*this.mazeInfo.column),Math.floor(Math.random()*this.mazeInfo.row)))];for(e.visited=!0;e;){const r=e.checkNeighbors(this.gridData);r?(this.removeWalls(e,r),t.push(r),e=r,e.visited=!0):e=t.pop()}return this}removeWalls(t,e){const{x:r,y:s}=t.position,{x:o,y:h}=e.position;o!==r?o>r?(t.walls[a.Right]=!1,e.walls[a.Left]=!1):(t.walls[a.Left]=!1,e.walls[a.Right]=!1):h>s?(t.walls[a.Bottom]=!1,e.walls[a.Top]=!1):(t.walls[a.Top]=!1,e.walls[a.Bottom]=!1),this.ensureMazeEdgeWalls(t),this.ensureMazeEdgeWalls(e)}ensureMazeEdgeWalls(t){const{position:{x:e,y:r},walls:s}=t;e===this.mazeInfo.column-1&&(s[a.Right]=!0),e===0&&(s[a.Left]=!0),r===this.mazeInfo.row-1&&(s[a.Bottom]=!0),r===0&&(s[a.Top]=!0)}isGoalCell(t){return u(this.mazeInfo.goal,t)}}class C{constructor(t,e,r,s){this.row=t,this.column=e,this.width=r,this.height=s}get cell(){return new b(this.width/this.column,this.height/this.row)}get goal(){return new n(Math.round(this.column/2)-1,Math.round(this.row/2)-1)}get goalCoordinate(){return new n(this.goal.x*this.cell.width,this.goal.y*this.cell.height)}get cellCount(){return this.row*this.column}get lastCell(){return new n(this.column-1,this.row-1)}}const f=["ArrowUp","ArrowRight","ArrowDown","ArrowLeft"];class w{constructor(t,e,r,s){this.x=t,this.y=e,this.grid=r,this.mazeInfo=s,window.addEventListener("keydown",({code:o,key:h})=>{const l=f.indexOf(o);f.includes(h)&&this.validMove(l)&&this.move(l)})}get position(){return new n(this.x,this.y)}get coordinate(){return new n(this.x*this.mazeInfo.cell.width,this.y*this.mazeInfo.cell.height)}get onGoalArea(){return u(this.mazeInfo.goal,this.position)}getPlayerPosition(){return this.grid[d(this.position)]}validMove(t){return!this.getPlayerPosition().walls[t]}move(t){switch(t){case a.Top:this.y-=1;break;case a.Right:this.x+=1;break;case a.Bottom:this.y+=1;break;case a.Left:this.x-=1;break}}}class n{constructor(t,e){this.x=t,this.y=e}}class L{constructor(t,e){c(this,"grid");c(this,"player");c(this,"drawer");c(this,"requestAnimation",0);this.ctx=t,this.mazeInfo=e,this.grid=new M(this.mazeInfo),this.grid.generate(),this.player=new w(0,0,this.grid.gridData,this.mazeInfo),this.drawer=new P(this.ctx,this.mazeInfo)}initialize(){this.grid.generatePath(new n(this.mazeInfo.column-1,this.mazeInfo.row-1)).generatePath(new n(0,0)).randomWalk(),this.animate()}restart(){this.grid.reset(),this.grid.generate(),this.player=new w(0,0,this.grid.gridData,this.mazeInfo),this.initialize()}animate(){if(this.drawer.reset(),this.drawer.drawBox(this.mazeInfo.goalCoordinate),this.drawer.drawMaze(this.grid.cells),this.drawer.drawBox(this.player.coordinate,"orange"),this.player.onGoalArea){cancelAnimationFrame(this.requestAnimation),setTimeout(()=>{alert("You Win!!!"),this.restart()},0);return}this.requestAnimation=requestAnimationFrame(this.animate.bind(this))}}const m=400,y=800,N=15,W=29;window.onload=()=>{const i=document.querySelector("#canvas"),t=i.getContext("2d");i.height=m,i.width=y,new L(t,new C(N,W,y,m)).initialize()};
